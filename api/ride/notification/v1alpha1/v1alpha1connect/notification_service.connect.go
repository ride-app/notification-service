// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ride/notification/v1alpha1/notification_service.proto

package v1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/ride-app/notification-service/api/ride/driver/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// NotificationServiceName is the fully-qualified name of the NotificationService service.
	NotificationServiceName = "ride.notification.v1alpha1.NotificationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotificationServiceGetNotificationTokenProcedure is the fully-qualified name of the
	// NotificationService's GetNotificationToken RPC.
	NotificationServiceGetNotificationTokenProcedure = "/ride.notification.v1alpha1.NotificationService/GetNotificationToken"
	// NotificationServiceUpdateNotificationTokenProcedure is the fully-qualified name of the
	// NotificationService's UpdateNotificationToken RPC.
	NotificationServiceUpdateNotificationTokenProcedure = "/ride.notification.v1alpha1.NotificationService/UpdateNotificationToken"
)

// NotificationServiceClient is a client for the ride.notification.v1alpha1.NotificationService
// service.
type NotificationServiceClient interface {
	GetNotificationToken(context.Context, *connect_go.Request[v1alpha1.GetNotificationTokenRequest]) (*connect_go.Response[v1alpha1.GetNotificationTokenResponse], error)
	UpdateNotificationToken(context.Context, *connect_go.Request[v1alpha1.UpdateNotificationTokenRequest]) (*connect_go.Response[v1alpha1.UpdateNotificationTokenResponse], error)
}

// NewNotificationServiceClient constructs a client for the
// ride.notification.v1alpha1.NotificationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotificationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NotificationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notificationServiceClient{
		getNotificationToken: connect_go.NewClient[v1alpha1.GetNotificationTokenRequest, v1alpha1.GetNotificationTokenResponse](
			httpClient,
			baseURL+NotificationServiceGetNotificationTokenProcedure,
			opts...,
		),
		updateNotificationToken: connect_go.NewClient[v1alpha1.UpdateNotificationTokenRequest, v1alpha1.UpdateNotificationTokenResponse](
			httpClient,
			baseURL+NotificationServiceUpdateNotificationTokenProcedure,
			opts...,
		),
	}
}

// notificationServiceClient implements NotificationServiceClient.
type notificationServiceClient struct {
	getNotificationToken    *connect_go.Client[v1alpha1.GetNotificationTokenRequest, v1alpha1.GetNotificationTokenResponse]
	updateNotificationToken *connect_go.Client[v1alpha1.UpdateNotificationTokenRequest, v1alpha1.UpdateNotificationTokenResponse]
}

// GetNotificationToken calls ride.notification.v1alpha1.NotificationService.GetNotificationToken.
func (c *notificationServiceClient) GetNotificationToken(ctx context.Context, req *connect_go.Request[v1alpha1.GetNotificationTokenRequest]) (*connect_go.Response[v1alpha1.GetNotificationTokenResponse], error) {
	return c.getNotificationToken.CallUnary(ctx, req)
}

// UpdateNotificationToken calls
// ride.notification.v1alpha1.NotificationService.UpdateNotificationToken.
func (c *notificationServiceClient) UpdateNotificationToken(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateNotificationTokenRequest]) (*connect_go.Response[v1alpha1.UpdateNotificationTokenResponse], error) {
	return c.updateNotificationToken.CallUnary(ctx, req)
}

// NotificationServiceHandler is an implementation of the
// ride.notification.v1alpha1.NotificationService service.
type NotificationServiceHandler interface {
	GetNotificationToken(context.Context, *connect_go.Request[v1alpha1.GetNotificationTokenRequest]) (*connect_go.Response[v1alpha1.GetNotificationTokenResponse], error)
	UpdateNotificationToken(context.Context, *connect_go.Request[v1alpha1.UpdateNotificationTokenRequest]) (*connect_go.Response[v1alpha1.UpdateNotificationTokenResponse], error)
}

// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	notificationServiceGetNotificationTokenHandler := connect_go.NewUnaryHandler(
		NotificationServiceGetNotificationTokenProcedure,
		svc.GetNotificationToken,
		opts...,
	)
	notificationServiceUpdateNotificationTokenHandler := connect_go.NewUnaryHandler(
		NotificationServiceUpdateNotificationTokenProcedure,
		svc.UpdateNotificationToken,
		opts...,
	)
	return "/ride.notification.v1alpha1.NotificationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotificationServiceGetNotificationTokenProcedure:
			notificationServiceGetNotificationTokenHandler.ServeHTTP(w, r)
		case NotificationServiceUpdateNotificationTokenProcedure:
			notificationServiceUpdateNotificationTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotificationServiceHandler struct{}

func (UnimplementedNotificationServiceHandler) GetNotificationToken(context.Context, *connect_go.Request[v1alpha1.GetNotificationTokenRequest]) (*connect_go.Response[v1alpha1.GetNotificationTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ride.notification.v1alpha1.NotificationService.GetNotificationToken is not implemented"))
}

func (UnimplementedNotificationServiceHandler) UpdateNotificationToken(context.Context, *connect_go.Request[v1alpha1.UpdateNotificationTokenRequest]) (*connect_go.Response[v1alpha1.UpdateNotificationTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ride.notification.v1alpha1.NotificationService.UpdateNotificationToken is not implemented"))
}
