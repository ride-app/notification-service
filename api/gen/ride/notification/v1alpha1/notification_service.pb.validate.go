// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ride/notification/v1alpha1/notification_service.proto

package notificationv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetNotificationTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotificationTokenRequestMultiError, or nil if none found.
func (m *GetNotificationTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetNotificationTokenRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GetNotificationTokenRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^users/[A-Za-z0-9_-]+/token$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNotificationTokenRequestMultiError(errors)
	}

	return nil
}

// GetNotificationTokenRequestMultiError is an error wrapping multiple
// validation errors returned by GetNotificationTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNotificationTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationTokenRequestMultiError) AllErrors() []error { return m }

// GetNotificationTokenRequestValidationError is the validation error returned
// by GetNotificationTokenRequest.Validate if the designated constraints
// aren't met.
type GetNotificationTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationTokenRequestValidationError) ErrorName() string {
	return "GetNotificationTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationTokenRequestValidationError{}

var _GetNotificationTokenRequest_Name_Pattern = regexp.MustCompile("^users/[A-Za-z0-9_-]+/token$")

// Validate checks the field values on GetNotificationTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotificationTokenResponseMultiError, or nil if none found.
func (m *GetNotificationTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return GetNotificationTokenResponseMultiError(errors)
	}

	return nil
}

// GetNotificationTokenResponseMultiError is an error wrapping multiple
// validation errors returned by GetNotificationTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type GetNotificationTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationTokenResponseMultiError) AllErrors() []error { return m }

// GetNotificationTokenResponseValidationError is the validation error returned
// by GetNotificationTokenResponse.Validate if the designated constraints
// aren't met.
type GetNotificationTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationTokenResponseValidationError) ErrorName() string {
	return "GetNotificationTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationTokenResponseValidationError{}

// Validate checks the field values on UpdateNotificationTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotificationTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotificationTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateNotificationTokenRequestMultiError, or nil if none found.
func (m *UpdateNotificationTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotificationTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateNotificationTokenRequest_Name_Pattern.MatchString(m.GetName()) {
		err := UpdateNotificationTokenRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^users/[A-Za-z0-9_-]+/token$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if len(errors) > 0 {
		return UpdateNotificationTokenRequestMultiError(errors)
	}

	return nil
}

// UpdateNotificationTokenRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateNotificationTokenRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateNotificationTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotificationTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotificationTokenRequestMultiError) AllErrors() []error { return m }

// UpdateNotificationTokenRequestValidationError is the validation error
// returned by UpdateNotificationTokenRequest.Validate if the designated
// constraints aren't met.
type UpdateNotificationTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationTokenRequestValidationError) ErrorName() string {
	return "UpdateNotificationTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationTokenRequestValidationError{}

var _UpdateNotificationTokenRequest_Name_Pattern = regexp.MustCompile("^users/[A-Za-z0-9_-]+/token$")

// Validate checks the field values on UpdateNotificationTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotificationTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotificationTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateNotificationTokenResponseMultiError, or nil if none found.
func (m *UpdateNotificationTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotificationTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateNotificationTokenResponseMultiError(errors)
	}

	return nil
}

// UpdateNotificationTokenResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateNotificationTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateNotificationTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotificationTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotificationTokenResponseMultiError) AllErrors() []error { return m }

// UpdateNotificationTokenResponseValidationError is the validation error
// returned by UpdateNotificationTokenResponse.Validate if the designated
// constraints aren't met.
type UpdateNotificationTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationTokenResponseValidationError) ErrorName() string {
	return "UpdateNotificationTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationTokenResponseValidationError{}
